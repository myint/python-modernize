#!/usr/bin/env cram --indent=4

Test a minimal example.

    $ cat > example.py <<EOF
    > print 'blah', 'blah'
    > x = {'abc': 123}
    > print(x.has_key())
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    from __future__ import print_function
    print('blah', 'blah')
    x = {'abc': 123}
    print(x.has_key())

Test doctest. Ignore trailing whitespace caused by python-modernize.

    $ cat > example.py <<EOF
    > """
    > >>> x = {'abc': 123}
    > >>> x.has_key('abc')
    > True
    > """
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs --doctests example.py

    $ cat example.py | sed -e :a -e '/^\n*$/{$d;N;};/\n$/ba'
    """
    >>> x = {'abc': 123}
    >>> 'abc' in x
    True
    """

Test print with shebang.

    $ cat > example.py <<EOF
    > #!/usr/bin/env python
    > print 'blah', 'blah'
    > print 123
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    #!/usr/bin/env python
    
    from __future__ import print_function
    print('blah', 'blah')
    print(123)

Test existing future print import.

    $ cat > example.py <<EOF
    > #!/usr/bin/env python
    > from __future__ import print_function
    > print('blah', 'blah')
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    #!/usr/bin/env python
    from __future__ import print_function
    print('blah', 'blah')

Test with no print.

    $ cat > example.py <<EOF
    > x = {'abc': 123}
    > x.has_key('abc')
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    x = {'abc': 123}
    'abc' in x

Test that future import gets added to any files with imports.

    $ cat > example.py <<EOF
    > import os
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    from __future__ import absolute_import
    import os

Test that future import gets added to any files with imports.

    $ cat > example.py <<EOF
    > resource_type == types.DictType
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    resource_type == dict

Fix unicode.

    $ cat > example.py <<EOF
    > path = u'/dev'
    > EOF

    $ $TESTDIR/python-modernize --future-unicode --write --no-diffs example.py

    $ cat example.py
    from __future__ import unicode_literals
    path = '/dev'

Test additional fixers.

    $ cat > example.py <<EOF
    > from itertools import izip
    > izip([1, 2], [3, 4])
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    
    zip([1, 2], [3, 4])

Test existing parenthesized future imports.

    $ cat > example.py <<EOF
    > from __future__ import (print_function, unicode_literals)
    > EOF

    $ $TESTDIR/python-modernize --write --no-diffs example.py

    $ cat example.py
    from __future__ import (print_function, unicode_literals)
